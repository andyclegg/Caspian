#!/usr/bin/env python
import numpy
import argparse
import matplotlib.pyplot as plt
import sys

parser = argparse.ArgumentParser()
parser.add_argument("-l","--log",action="store_true", dest="log")
parser.add_argument("-s","--save",action="store_true",dest="save")
parser.add_argument("-v","--verbose",action="store_true",dest="verbose")
parser.add_argument("-m","--min",action="store",dest="min",default=None,type=float)
parser.add_argument("-M","--max",action="store",dest="max",default=None,type=float)
parser.add_argument("-f","--fill-value",action="store",dest="fillval",default=-999.0,type=float)
parser.add_argument("width", type=int)
parser.add_argument("data_file", nargs='+')
result = parser.parse_args()

for inputfile in result.data_file:
   if result.verbose: print inputfile
   input_data = numpy.fromfile(inputfile, 'float32')

   width = result.width
   height = input_data.size / width
   input_data = input_data.reshape(height, width)
   if (input_data == result.fillval).all():
      if result.verbose: print "No data in image"
      continue
   masked_data = numpy.ma.masked_array(input_data, input_data == result.fillval)

   if result.log:
      masked_data = numpy.log10(masked_data)

   try:
      plt.figure()
      plt.imshow(masked_data, vmin=result.min, vmax=result.max)
      plt.colorbar()
      plt.title(inputfile)
      if (result.save):
         plt.savefig(inputfile + '.png')
      else:
         plt.show()
   except Exception, err:
      sys.exit("Error viewing data (%s)" % err)
