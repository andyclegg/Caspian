#ifndef  HEADER_RESULT_SET
#define HEADER_RESULT_SET
#include <pthread.h>

/**
 * Singly-linked list of individual results (used as part of a result_set).
 */
typedef struct result_set_item_s {
   /** The x-value of the result item.*/
   float x;

   /** The y-value of the result item.*/
   float y;

   /** The time value of the result item.*/
   float t;

   /** The index of the result item.*/
   int record_index;

   /** The next result_set_item in the linked list.*/
   struct result_set_item_s *next;
} result_set_item;

/**
 * A thread-safe set of query results generated by querying an index.
 */
typedef struct result_set_s {
   /** The head of the result_set_item linked list.*/
   result_set_item *head;

   /** The current item of the result_set_item linked list.*/
   result_set_item *current;

   /** The tail of the result_set_item linked list.*/
   result_set_item *tail;

   /** A write lock, such that the result_set can be constructed in a multithreaded environment.*/
   pthread_mutex_t write_lock;

   /** The length of the result set.*/
   unsigned int length;

   /**
    * Insert a single item into a result set.
    *
    * @param set The initialised result_set to insert the item into.
    * @param x The x-value of the new item.
    * @param y The y-value of the new item.
    * @param t The time value of the new item.
    * @param record_index The index of the new item.
    */
   void (* insert)(struct result_set_s *set, float x, float y, float t, int record_index);

   /**
    * Free a result_set.
    *
    * @param tofree The result_set to free.
    */
   void (* free)(struct result_set_s *tofree);

   /**
    * Return the next result_set_item from a result_set.
    *
    * @param set The result_set to retrieve the next item from.
    * @return A pointer to the next result_set_item.
    */
   result_set_item *(* iterate)(struct result_set_s *set);

} result_set;

// Function prototypes - implemented in result_set.c
result_set *result_set_init();
#endif
